" Environment {
    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Start vim-plug {
        set rtp+=~/.vim/bundle/Vundle.vim
        call vundle#begin()
        Plugin 'VundleVim/Vundle.vim'
    " }
" }

" Bundle {
    " Style {
        " Status Bar - Airline {
            Plugin 'vim-airline/vim-airline'
            Plugin 'vim-airline/vim-airline-themes'
            set laststatus=2
            let g:solarized_termcolors=256
            let g:airline_theme='solarized'
            let g:airline_powerline_fonts = 1
            let g:airline#extensions#tabline#enabled = 1
            let g:airline#extensions#tabline#buffer_idx_mode = 1
            nmap <leader>1 <Plug>AirlineSelectTab1
            nmap <leader>2 <Plug>AirlineSelectTab2
            nmap <leader>3 <Plug>AirlineSelectTab3
            nmap <leader>4 <Plug>AirlineSelectTab4
            nmap <leader>5 <Plug>AirlineSelectTab5
            nmap <leader>6 <Plug>AirlineSelectTab6
            nmap <leader>7 <Plug>AirlineSelectTab7
            nmap <leader>8 <Plug>AirlineSelectTab8
            nmap <leader>9 <Plug>AirlineSelectTab9
            nnoremap <Leader>ll :bn<CR>
            nnoremap <Leader>hh :bp<CR>
        " }

        " indentLine - Show Tab / Leading Spaces {
            Plugin 'Yggdroot/indentLine'
        " }

        " Git Diff - vim-gitgutter {
            Plugin 'airblade/vim-gitgutter'
        " }

        " Line Number - numbers {
            Plugin 'myusuf3/numbers.vim'
            let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree']
        " }

        " Trailing Space - ShowTrailingWhitespace {
            Plugin 'ShowTrailingWhitespace'
            highlight ShowTrailingWhitespace ctermbg=Green guibg=Red
        "}

        " File Encodings - FenView {
            Plugin 'FencView.vim'
        " }
    " }

    " Markdown {
        Plugin 'godlygeek/tabular'
        Plugin 'plasticboy/vim-markdown'
        let g:vim_markdown_folding_disabled = 1
    " }

    " Developer Tools {
        " Code snips: ultisnips {
            Plugin 'SirVer/ultisnips'
            Plugin 'honza/vim-snippets'

            " Trigger configuration. Do not use <tab> with YouCompleteMe.
            let g:UltiSnipsSnippetDirectories = [$HOME.'/.dotfiles/vim/UltiSnips']
            let g:UltiSnipsExpandTrigger = "<tab>"
            let g:UltiSnipsJumpForwardTrigger = "<tab>"
            let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
            let g:UltiSnipsEditSplit="vertical"
            let g:ycm_min_num_of_chars_for_completion = 1
        " }

        " L9 {
            Plugin 'L9'
        " }

        " Search Tool - Ack {
            Plugin 'mileszs/ack.vim'
            if executable('ag')
                let g:ackprg = 'ag --vimgrep --ignore-dir docs --ignore-dir doc --ignore-dir unit-test'
            endif
            cnoreabbrev Ack Ack!
            nnoremap <Leader>a :Ack!<Space>
        " }

        " File Mangement - Nerdtree {
            Plugin 'scrooloose/nerdtree'
            Plugin 'Xuyuanp/nerdtree-git-plugin'
            map <leader>e :NERDTreeToggle<CR>
            let g:NERDTreeIndicatorMapCustom = {
                        \ "Modified"  : "✹",
                        \ "Staged"    : "✚",
                        \ "Untracked" : "✭",
                        \ "Renamed"   : "➜",
                        \ "Unmerged"  : "═",
                        \ "Deleted"   : "✖",
                        \ "Dirty"     : "✗",
                        \ "Clean"     : "✔︎",
                        \ "Unknown"   : "?"
                        \ }
            function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
                exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
                exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
            endfunction

            call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
            call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
            call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
            call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
            call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
            call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
            call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
            call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
            call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
            call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
            call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
            call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
            call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
        " }

        " Git Hotkey - vim-fugitive {
            Plugin 'tpope/vim-fugitive'
            nnoremap <silent> <leader>gs :Gstatus<CR>
            nnoremap <silent> <leader>gd :Gdiff<CR>
            nnoremap <silent> <leader>gc :Gcommit<CR>
            nnoremap <silent> <leader>gb :Gblame<CR>
            nnoremap <silent> <leader>gl :Glog<CR>
            nnoremap <silent> <leader>gp :Git push<CR>
            nnoremap <silent> <leader>gr :Gread<CR>
            nnoremap <silent> <leader>gw :Gwrite<CR>
            nnoremap <silent> <leader>ge :Gedit<CR>
            nnoremap <silent> <leader>gi :Git add -p %<CR>
            nnoremap <silent> <leader>gg :SignifyToggle<CR>
        " }

        " Youcompleteme {
            Plugin 'Valloric/YouCompleteMe'
            Plugin 'ervandew/supertab'
            " make YCM compatible with UltiSnips (using supertab)
            let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
            let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
            let g:SuperTabDefaultCompletionType = '<C-n>'

            let g:ycm_global_ycm_extra_conf = '~/.dotfiles/vim/ycm_extra_conf.py'
            nnoremap <C-e> :YcmDiags<CR> <C-j> :lnext<CR>
            nnoremap ]a     :lnext<CR>
            nnoremap [a     :lprevious<CR>
        " }

        " Comment the code - vim-commnetary {
            Plugin 'tpope/vim-commentary'
        " }

        " Display Indent - vim-indent-guides {
            " Usage: <leader> ig
            "Plugin 'nathanaelkane/vim-indent-guides'
            "let g:indent_guides_start_level = 2
            "let g:indent_guides_enable_on_vim_startup = 1
        " }

        " Easymotion {
            " To jump everywhere in the source code.
            Plugin 'Lokaltog/vim-easymotion'
            map  / <Plug>(easymotion-sn)
            omap / <Plug>(easymotion-tn)
            map  n <Plug>(easymotion-next)
            map  N <Plug>(easymotion-prev)
            map <Leader>l <Plug>(easymotion-lineforward)
            map <Leader>j <Plug>(easymotion-j)
            map <Leader>k <Plug>(easymotion-k)
            map <Leader>h <Plug>(easymotion-linebackward)
            nmap <Leader>s <Plug>(easymotion-s2)
            nmap <Leader>t <Plug>(easymotion-t2)
            let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
        " }

        " Documentation - Doxygen {
            Plugin 'vim-scripts/DoxygenToolkit.vim'
            let g:load_doxygen_syntax=1
            let g:DoxygenToolkit_authorName="Quexint"
        " }

        " Window Management - Taglist {
            Plugin 'vim-scripts/taglist.vim'
            nnoremap <silent> <F8> :TlistToggle<CR>
            let Tlist_Show_One_File=0
            let Tlist_Exit_OnlyWindow=1
            let Tlist_Use_Right_Window=1
            let Tlist_File_Fold_Auto_Close=1
            autocmd BufWritePost *
                        \ if filereadable('tags') |
                        \   call system('ctags -a '.expand('%')) |
                        \ endif
        " }
    " }
" }

" Environment {
    " End {
        call vundle#end()            " required
        syn on
        filetype plugin indent on    " required
    " }
" }

" Shell Tools {
    " C {
        " Browsing C Code: Cscope {
        if has("cscope")
            set csprg=cscope
            set csto=1
            set cst
            function! LoadCscope()
                let db = findfile("cscope.out", ".;")
                if (!empty(db))
                    let path = strpart(db, 0, match(db, "/cscope.out$"))
                    set nocscopeverbose " suppress 'duplicate connection' error
                    exe "cs add " . db . " " . path
                    set cscopeverbose
                endif
            endfunction
            au BufEnter /* call LoadCscope()
        endif

        nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nnoremap <silent> <leader>f :cs find f<SPACE>
        nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
        " }
    " }

    " Ranger in OS X {
        function RangerExplorer()
            exec "silent !ranger --choosefile=/tmp/vim_ranger_current_file " . system('echo "' . expand("%:p:h") . '" | sed -E "s/\ /\\\ /g"')
            if filereadable('/tmp/vim_ranger_current_file')
                exec 'edit ' . system('cat /tmp/vim_ranger_current_file | sed -E "s/\ /\\\ /g"')
                call system('rm /tmp/vim_ranger_current_file')
            endif
            redraw!
        endfun
        map <Leader>x :call RangerExplorer()<CR>
    " }
" }
